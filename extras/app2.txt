from flask import Flask, request, send_file
import os
import traceback
import pandas as pd
from werkzeug.utils import secure_filename
from flask_cors import CORS
import logging
import glob
import pdfkit
from openpyxl import load_workbook

app = Flask(__name__)
CORS(app)

UPLOAD_FOLDER = 'uploads'
OUTPUT_FOLDER = 'output'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

ALLOWED_EXTENSIONS = {'xlsx', 'xls'}

app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB max

logging.basicConfig(level=logging.INFO)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def cleanup_files():
    for folder in [UPLOAD_FOLDER, OUTPUT_FOLDER]:
        for f in glob.glob(os.path.join(folder, '*')):
            try:
                os.remove(f)
                logging.info(f"Removed file: {f}")
            except Exception as e:
                logging.warning(f"Failed to remove file {f}: {e}")

def get_rgb(color):
    if color and color.type == 'rgb' and color.rgb:
        return f"#{color.rgb[2:]}" if color.rgb.startswith("FF") else f"#{color.rgb}"
    return None

def convert_excel_to_html(filepath, html_path):
    try:
        wb = load_workbook(filepath, data_only=True)
        html_parts = []

        for sheet in wb.worksheets:
            html = f'<h2>Sheet: {sheet.title}</h2>\n<table class="excel-table">'
            for row in sheet.iter_rows():
                html += "<tr>"
                for cell in row:
                    value = cell.value if cell.value is not None else ""
                    tag = "th" if cell.row == 1 else "td"

                    # Extract style
                    style = ""
                    font = cell.font
                    fill = cell.fill

                    if font and font.bold:
                        style += "font-weight:bold;"
                    if font and font.color:
                        rgb = get_rgb(font.color)
                        if rgb:
                            style += f"color:{rgb};"
                    if fill and hasattr(fill, "fgColor"):
                        bg = get_rgb(fill.fgColor)
                        if bg:
                            style += f"background-color:{bg};"

                    html += f'<{tag} style="{style}">{value}</{tag}>'
                html += "</tr>"
            html += "</table>"
            html_parts.append(html)

        full_html = f"""
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{
                    font-family: Arial, sans-serif;
                    margin: 20px;
                }}
                table.excel-table {{
                    width: 100%;
                    border-collapse: collapse;
                    margin-bottom: 40px;
                }}
                table.excel-table th, table.excel-table td {{
                    border: 1px solid #444;
                    padding: 6px 10px;
                    text-align: left;
                }}
                h2 {{
                    margin-top: 30px;
                    color: #333;
                }}
            </style>
        </head>
        <body>
            {''.join(html_parts)}
        </body>
        </html>
        """

        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(full_html)

        return True, None
    except Exception as e:
        return False, str(e)

@app.route('/', methods=['GET'])
def index():
    return "Excel to PDF Converter API is running."

@app.route('/', methods=['POST'])
def convert_excel_to_pdf():
    file = request.files.get('file')
    if not file:
        return "No file provided", 400

    filename = secure_filename(file.filename)
    if not allowed_file(filename):
        return "Invalid file type. Only .xlsx or .xls allowed.", 400

    filepath = os.path.join(UPLOAD_FOLDER, filename)
    file.save(filepath)
    logging.info(f"File saved: {filepath}")

    # Convert .xls to .xlsx
    if filename.lower().endswith('.xls'):
        try:
            df = pd.read_excel(filepath, engine='xlrd')
            filepath = filepath.rsplit('.', 1)[0] + '.xlsx'
            df.to_excel(filepath, index=False, engine='openpyxl')
            logging.info(f"Converted .xls to .xlsx: {filepath}")
        except Exception as e:
            traceback.print_exc()
            cleanup_files()
            return f"Failed to convert .xls to .xlsx: {str(e)}", 500

    html_path = os.path.join(OUTPUT_FOLDER, filename + '.html')
    pdf_path = os.path.join(OUTPUT_FOLDER, filename + '.pdf')

    try:
        success, error = convert_excel_to_html(filepath, html_path)
        if not success:
            raise Exception(error)

        pdfkit_config = pdfkit.configuration(wkhtmltopdf='/usr/bin/wkhtmltopdf')
        options = {
            'page-size': 'A4',
            'margin-top': '0.5in',
            'margin-right': '0.5in',
            'margin-bottom': '0.5in',
            'margin-left': '0.5in',
            'encoding': "UTF-8",
            'enable-local-file-access': None,
        }

        pdfkit.from_file(html_path, pdf_path, configuration=pdfkit_config, options=options)
        logging.info("PDF conversion success")

    except Exception as e:
        traceback.print_exc()
        cleanup_files()
        return f"Conversion failed: {str(e)}", 500

    response = send_file(pdf_path, as_attachment=True)
    cleanup_files()
    return response

if __name__ == '__main__':
    app.run(port=7000, debug=False)
