import os
import subprocess
import uuid
import pdfkit
import pandas as pd
from flask import Flask, request, send_file, jsonify
from werkzeug.utils import secure_filename
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

UPLOAD_FOLDER = 'uploads'
OUTPUT_FOLDER = 'output'

os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(OUTPUT_FOLDER, exist_ok=True)

ALLOWED_EXTENSIONS = {'xlsx', 'xls'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def is_complex_excel(file_path):
    try:
        df = pd.read_excel(file_path, engine='openpyxl')
        # Check for more than 10 columns or 50 rows or any merged cells
        if df.shape[1] > 10 or df.shape[0] > 50:
            return True
        return False
    except Exception:
        return True  # Fall back to LibreOffice if reading fails

def convert_using_libreoffice(input_path, output_dir):
    subprocess.run([
        'libreoffice',
        '--headless',
        '--convert-to', 'pdf',
        input_path,
        '--outdir', output_dir
    ], check=True)
    base_name = os.path.splitext(os.path.basename(input_path))[0]
    return os.path.join(output_dir, base_name + '.pdf')

def convert_using_pandas_to_pdf(input_path, output_pdf_path):
    df = pd.read_excel(input_path, engine='openpyxl')
    html = df.style.set_table_styles(
        [{'selector': 'th', 'props': [('background-color', '#f2f2f2'), ('text-align', 'center')]}]
    ).set_properties(**{
        'border': '1px solid #ccc',
        'padding': '8px',
        'text-align': 'left'
    }).hide(axis='index').to_html()

    # Write HTML to a temp file
    html_path = output_pdf_path.replace('.pdf', '.html')
    with open(html_path, 'w', encoding='utf-8') as f:
        f.write(html)

    config = pdfkit.configuration(wkhtmltopdf='/usr/bin/wkhtmltopdf')
    pdfkit.from_file(html_path, output_pdf_path, configuration=config, options={
        'page-size': 'A4',
        'encoding': 'UTF-8',
        'margin-top': '10mm',
        'margin-bottom': '10mm',
        'margin-left': '10mm',
        'margin-right': '10mm',
    })

    os.remove(html_path)
    return output_pdf_path

@app.route('/convert', methods=['POST'])
def convert_excel_to_pdf():
    file = request.files.get('file')
    if not file or not allowed_file(file.filename):
        return jsonify({"error": "No valid Excel file provided."}), 400

    filename = secure_filename(file.filename)
    unique_id = str(uuid.uuid4())
    input_path = os.path.join(UPLOAD_FOLDER, f"{unique_id}_{filename}")
    file.save(input_path)

    output_path = os.path.join(OUTPUT_FOLDER, f"{os.path.splitext(filename)[0]}_{unique_id}.pdf")

    try:
        if is_complex_excel(input_path):
            # Use LibreOffice for complex files
            final_pdf = convert_using_libreoffice(input_path, OUTPUT_FOLDER)
        else:
            # Use pandas + pdfkit for simple tabular data
            final_pdf = convert_using_pandas_to_pdf(input_path, output_path)

        return send_file(final_pdf, as_attachment=True, download_name=os.path.basename(final_pdf))

    except Exception as e:
        return jsonify({"error": "Conversion failed", "details": str(e)}), 500

    finally:
        # Clean up uploaded and output files
        for path in [input_path, output_path]:
            try:
                if os.path.exists(path):
                    os.remove(path)
            except Exception:
                pass

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=7000)
